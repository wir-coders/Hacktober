import java.util.*;
import java.util.Queue;
 
public class BFS{
private int n;
private LinkedList<Integer> adjList[];
private Queue<Integer> q = new LinkedList();
public void makeGraph(int no)
{
n = no;
adjList =  new LinkedList[no];
int i;
for (i= 0; i < no; i++)
{
adjList[i] = new LinkedList();
}
}

public void addEdgeToGraph(int u, int v)
{
adjList[u].add(v);
}
public void BFtraversal(int v, boolean[] visited)
{
q.add(v);
visited[v]  =  true;
int k;
while( !q.isEmpty() )
{  
k = q.remove();
    System.out.print( k +" ");
Iterator<Integer> i = adjList[k].listIterator();
int j;
while( i.hasNext() )
{  
        
         j = i.next();
if( visited[j] != true )
{
q.add(j);
visited[j] = true;
}
}
}
}
public void BFsearch(int v)
{
boolean visited[] = new boolean[n];
        BFtraversal(v, visited);
for ( int i = 0; i < n; i++ )
{  
    
if( visited[i] != true )
{
BFtraversal(i, visited);
}
}
}
public static void main(String args[])
{
BFS obj = new BFS();
obj.makeGraph(10);
obj.addEdgeToGraph(0, 1);
obj.addEdgeToGraph(0, 9);
obj.addEdgeToGraph(2, 3);
obj.addEdgeToGraph(2, 4);
obj.addEdgeToGraph(3, 5);
obj.addEdgeToGraph(3, 6);
obj.addEdgeToGraph(4, 7);
obj.addEdgeToGraph(4, 8);
obj.addEdgeToGraph(4, 9);
System.out.println("BFS of graph is:");
obj.BFsearch(0);
}
}
